<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.ideal.wfpf.dao.TableMapper">
	<resultMap id="tablebrief" type="cn.ideal.wfpf.model.TableBrief" >
		<id column="tbId" property="tbId" jdbcType="NUMERIC" />
		<association property="wf" column="tbId" select="cn.ideal.wfpf.dao.WorkflowMapper.findAllWorkflowsByTbId" />
		<association property="productCount" column="tbId" select="findProductCount" />
	</resultMap>
	<resultMap id="tableelement" type="cn.ideal.wfpf.model.TableElement" />			
	
	<select id="findAll" resultMap="tablebrief">
		select * from table_brief 
	</select>
	
	<select id="findAPage" resultMap="tablebrief" parameterType="java.util.Map">
		select * from table_brief	order by tbId 
		<if test="recordNumber != null ">
			LIMIT #{recordNumber},#{pageSize}
		</if>	
	</select>
		
	<select id="find" resultMap="tablebrief" parameterType="java.lang.Long">
		select * from table_brief where tbId=#{tbId}
	</select>
	
	<insert id="saveTableBrief" useGeneratedKeys="true" keyProperty="tbId" parameterType="cn.ideal.wfpf.model.TableBrief">
		insert into table_brief(
			name,tableName,cols,status,createdDate
		)
		values(
			#{name},
			#{tableName},
			#{cols},
			#{status},
			#{createdDate}
		)
	</insert>
	
	<update id="updateTableBrief" parameterType="cn.ideal.wfpf.model.TableBrief">
		update table_brief set 
			<if test="name != null">
				name=#{name}
			</if>
			<if test="tableName != null">
				tableName=#{tableName}
			</if>
			<if test="template != null">
				template=#{template},
			</if>
			<if test="cols != null">
				cols=#{cols}
			</if>
			<if test="status != null">
				status=#{status}
			</if>				
		<where>		
			tbId=#{tbId}			
		</where>				
	</update>	
		
	<update id="updateStatusTableBrief" parameterType="cn.ideal.wfpf.model.TableBrief">
		update table_brief set 			
			   status=#{status}
		<where>		
		  tbId=#{tbId}			
		</where>				
	</update>
	
	<insert id="saveTableElement" parameterType="cn.ideal.wfpf.model.TableElement">
		insert into table_element(
			tbId,emId,newLabelName,newFunctionName,functionBelongTo,rowes,cols,width,scope,seq,newHiddenFieldName,
			newDataContent,newFieldType,newFieldDataType,newLength,defaultValue,defaultValueFrom,list,createdDate
		)
		values		
		(
			#{item.tbId},
			#{item.emId},
			#{item.newLabelName},
			#{item.newFunctionName},
			#{item.functionBelongTo},
			#{item.rowes},
			#{item.cols},
			#{item.width},		
			#{item.scope},
			#{item.seq},
			#{item.newHiddenFieldName},
			#{item.newDataContent},
			#{item.newFieldType},
			#{item.newFieldDataType},
			#{item.newLength},
			#{item.defaultValue},
			#{item.defaultValueFrom},
			#{item.list},
			#{item.createdDate}
		)		
	</insert>
	
	<insert id="saveBatchTableElement" parameterType="java.util.List">
		insert into table_element(
			tbId,emId,newLabelName,newFunctionName,functionBelongTo,rowes,cols,width,scope,seq,newHiddenFieldName,
			newDataContent,newFieldType,newFieldDataType,newLength,defaultValue,defaultValueFrom,list,createdDate
		)
		values
		<foreach collection="list" item="item" index="index" separator=",">				
		(
			#{item.tbId},
			#{item.emId},
			#{item.newLabelName},
			#{item.newFunctionName},
			#{item.functionBelongTo},
			#{item.rowes},
			#{item.cols},
			#{item.width},			
			#{item.scope},
			#{item.seq},
			#{item.newHiddenFieldName},
			#{item.newDataContent},
			#{item.newFieldType},
			#{item.newFieldDataType},
			#{item.newLength},
			#{item.defaultValue},
			#{item.defaultValueFrom},
			#{item.list},
			#{item.createdDate}
		)
		</foreach>
	</insert>
	
	<update id="updateTableElement" parameterType="cn.ideal.wfpf.model.TableElement">
		update table_element set 			
			   newLabelName=#{newLabelName},
			   newFunctionName=#{newFunctionName},
			   functionBelongTo=#{functionBelongTo},
			   newHiddenFieldName=#{newHiddenFieldName},
			   newDataContent=#{newDataContent},
			   newFieldType=#{newFieldType},
			   newFieldDataType=#{newFieldDataType},
			   newLength=#{newLength},
			   defaultValue=#{defaultValue},
			   defaultValueFrom=#{defaultValueFrom},
			   rowes=#{rowes},
			   cols=#{cols},
			   width=#{width}
		<where>		
		      tbId=#{tbId}
		  and emId = #{emId}			
		</where>				
	</update>
		
	<update id="updateTableElementSeq" parameterType="cn.ideal.wfpf.model.TableElement">
		update table_element set 			
			   seq=#{seq}
		<where>		
		      tbId=#{tbId}
		  and emId = #{emId}			
		</where>				
	</update>
	
	<delete id="deleteTableElement" parameterType="java.util.Map">
		delete from table_element 
		<where>		
		      tbId=#{tbId}
		  and emId = #{emId}			
		</where>				
	</delete>
	
	<select id="findTableAllElements" resultMap="tableelement" parameterType="java.util.Map">
		select a.*,b.labelName,b.fieldName from table_element a
		 inner join element_library b on a.emId = b.emId 
		 where a.tbId = #{tbId}
		 <if test="scope != null">
		   and a.scope = #{scope}
		 </if> 
		 order by a.seq
	</select>	
	
	<select id="findTableElement" resultMap="tableelement" parameterType="java.util.Map">
		select a.* from table_element a
		 where a.tbId = #{tbId} 
		   and a.emId = #{emId}
	</select>
	
	<update id="updateTableElementList" parameterType="java.util.Map">
		update table_element set 			
			   list='有效'
		<where>		
		      tbId=#{tbId}
		  and emId in
          <foreach collection="emIds" item="item" index="index" open="(" close=")"  separator=",">
              ${item}
          </foreach>			
		</where>				
	</update>
	
	<update id="resetTableElementList" parameterType="java.lang.Long">
		update table_element set 			
			   list='无效'
		<where>		
		      tbId=#{tbId}		 	
		</where>				
	</update>
	
	<select id="findElementsOnList" resultMap="tableelement" parameterType="java.lang.Long">
		select a.* from table_element a
		 where a.tbId = #{tbId} 
		   and a.list = '有效'
	  order by seq
	</select>
		
	<select id="findAllWithTableName" resultMap="tablebrief">
		select * from table_brief where tableName is not null
	</select>	
	
	<select id="findTableSpecialElements" resultMap="tableelement" parameterType="java.lang.Long">
		select b.emId,b.labelName,b.fieldName from element_library b
		 where b.grade='列表级' 
		   and b.emId not in (select emId from table_element where tbId = #{tbId})
	</select>
	
	<!-- 获取流程节点设置的字段 -->
	<select id="findTableAllElementsOnNode" resultMap="tableelement" parameterType="java.util.Map">
		select a.* from table_element a
		 inner join workflow b on b.tbId = a.tbId
		 inner join workflow_table_element c on b.wfId = c.wfId and a.emId=c.emId
		 where a.tbId = #{tbId}
		   and b.wfId = #{wfId}
		   and c.nodeId = #{nodeId}
		 order by a.seq
	</select>
	
	<insert id="saveTableElementOnNode" parameterType="java.util.Map">
		delete from workflow_table_element where wfId = #{wfId} and nodeId = #{nodeId};
		insert into workflow_table_element(
			wfId,nodeId,emId
		)
		values
		<foreach collection="emIds" item="item" index="index" separator=",">				
		(
			#{wfId},
			#{nodeId},
			#{item}
		)
		</foreach>
	</insert>
		
	<select id="findAllWithTableNameNoRelated" resultMap="tablebrief">
		select * from table_brief 
		where tableName is not null
		  and tbId not in (select tbId from workflow where status = '有效' and tbId is not null)
	</select>
		
	<delete id="deleteTableBrief" parameterType="java.lang.Long">
		delete from table_brief 
		<where>		
		      tbId=#{tbId}		  	
		</where>				
	</delete>	
		
	<!-- 获得生产数据 -->
	<select id="findProductCount" resultType="java.lang.Long">
		select count(a.wfId) from table_summary a
		inner join workflow b on a.wfId = b.wfId
		where b.tbId = #{tbId}
	</select>
</mapper>
