<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.ideal.wf.dao.NodeMapper">
	<resultMap id="node" type="cn.ideal.wf.model.Node" >
		<id column="nodeId" property="nodeId" jdbcType="NUMERIC" />
		<association property="role" column="nodeId" select="findRole" />
		<association property="users" column="nodeId" select="findUsers" />
		<association property="org" column="nodeId" select="findOrg" />
		<association property="preNodes" column="nodeId" select="findPreNode" />
	</resultMap>	
	
	<select id="find" resultType="cn.ideal.wf.model.Node" parameterType="java.lang.Long">
		select * from workflow_node
		 where nodeId = #{nodeId}
	</select>
			
	<select id="findAllOnlyNode" resultMap="node" parameterType="java.lang.Long">
		select * from workflow_node
		 where status != "无效"
		   and wfId = #{wfId}
	</select>
	
	<insert id="save" useGeneratedKeys="true" keyProperty="nodeId" parameterType="cn.ideal.wf.model.Node">
		insert into workflow_node(
			nodeName,timeLimit,uType,nType,action,status,createdDate,modifiedDate,wfId
		)
		values(
			#{nodename},
			#{timeLimit},
			#{uType},
			#{nType},
			#{action},
			#{status},
			#{createdDate},
			#{modifiedDate},
			#{wfId}
		)
	</insert>
	
	<update id="update" parameterType="cn.ideal.wf.model.Node">
		update workflow_node set
			nodeName = #{nodename},
			timeLimit = #{timeLimit},
			uType = #{uType},
			nType = #{nType},
			action = #{action},
			status = #{status}
		where nodeId = #{nodeId}
	</update>
	
	<update id="updateStatus" parameterType="cn.ideal.wf.model.Node">
		update workflow_node set			
			status = #{status}
		where nodeId = #{nodeId}
	</update>
	
	<insert id="saveNodeNodes" parameterType="cn.ideal.wf.model.Node">
		insert into workflow_node_nodes(
			nodeId,suf_nodeId,createdDate
		)
		values
		<foreach collection="preNodes" item="item" index="index" separator=",">				
		(
			#{item.nodeId},
			#{nodeId},			
			#{createdDate}
		)
		</foreach>
	
	</insert>
	
	<insert id="saveUser" parameterType="cn.ideal.wf.model.Node">
		insert into workflow_node_user(
			nodeId,userId,userName,unitId,unitName,createdDate
		)
		values
		<foreach collection="users" item="item" index="index" separator=",">				
		(
			#{nodeId},
			#{item.userId},
			#{item.userName},
			#{org.orgId},
			#{org.orgName},
			#{createdDate}
		)
		</foreach>
	
	</insert>
	
	<insert id="saveRole" parameterType="cn.ideal.wf.model.Node">
		insert into workflow_node_role(
			nodeId,roleId,roleName,unitId,unitName,createdDate
		)
		values(
			#{nodeId},
			#{role.roleId},
			#{role.roleName},
			#{org.orgId},
			#{org.orgName},
			#{createdDate}
		)
	</insert>
	
	<delete id="deleteUser" parameterType="java.lang.Long">
		delete from workflow_node_user where nodeId = #{nodeId}
	</delete>
	
	<delete id="deleteRole" parameterType="java.lang.Long">
		delete from workflow_node_role where nodeId = #{nodeId}
	</delete>
	
	<select id="findRole" resultType="cn.ideal.wf.model.CertificationRole" parameterType="java.lang.Long">
		select * from workflow_node_role
		 where nodeId = #{nodeId}
	</select>
	
	<select id="findUsers" resultType="cn.ideal.wf.model.CertificationUser" parameterType="java.lang.Long">
		select * from workflow_node_user
		 where nodeId = #{nodeId}
	</select>
	
	<select id="findOrg" resultType="cn.ideal.wf.model.CertificationOrg" parameterType="java.lang.Long">
		select distinct * from (
			select unitId as orgId, unitName as orgName from workflow_node_user
			 where nodeId = #{nodeId}
			union 
			select unitId as orgId, unitName as orgName from workflow_node_role
			 where nodeId = #{nodeId}
		 ) org
	</select>
	
	<resultMap id="leaf" type="cn.ideal.wf.model.Node" >
		<id column="nodeId" property="nodeId" jdbcType="NUMERIC" />
		<association property="preNodes" column="nodeId" select="findPreNode" />
		<association property="sufNodes" column="nodeId" select="findSufNode" />		
	</resultMap>
	<select id="findAll" resultMap="leaf" parameterType="java.lang.Long">
		select * from workflow_node
		 where status != "无效"
		   and wfId = #{wfId}
	</select>
	
	<!-- 获取前置节点 -->
	<select id="findPreNode" resultMap="node" parameterType="java.lang.Long">
		select n.* from workflow_node n
		inner join workflow_node_nodes a on n.nodeId = a.nodeId
		 where a.suf_nodeId = #{nodeId}
		   and n.status != "无效"
	</select>
	
	<!-- 获取后置节点 -->
	<select id="findSufNode" resultMap="node" parameterType="java.lang.Long">
		select n.* from workflow_node n
		inner join workflow_node_nodes a on a.suf_nodeId = n.nodeId
		 where a.nodeId = #{nodeId}
		   and n.status != "无效"
	</select>
</mapper>
